<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mz.community.dao.neo4jMapper.NeoDiscussPostMapper">

    <select id="selectZeroReply" resultType="DiscussPost">
        match(d:DiscussPost)
        with d.PostId as id,d.userId as userId,d.content as content,d.type as type,
            d.score as score,d.commentCount as commentCount,d.create_Time as createTime,
            d.status as status,d.title as title,d.linkUrl as linkUrl
        where status=0 and commentCount=0 and userId &lt;&gt; #{userId} return id,userId,title,content,type,status,commentCount,linkUrl,score
        order by score, createTime skip #{offset} limit #{limit}
    </select>

    <select id="selectRelationZeroReply" resultType="DiscussPost">
        optional match(u:User{UserId:#{userId}})-[*..3]->(t:Tags)
        optional match(d:DiscussPost)-[:TAGS]->(t)
        with
            d.PostId as id,d.userId as userId,d.content as content,d.type as type,
            d.score as score,d.commentCount as commentCount,d.create_Time as createTime,
            d.status as status,d.title as title,d.linkUrl as linkUrl
        where commentCount=0 and type &lt;&gt; 4 and userId &lt;&gt; #{userId}
          and not exists((u)-[]->(d))
            return distinct id,userId,title,content,type,status,commentCount,linkUrl,score
        order by score skip #{offset} limit #{limit}
    </select>

    <select id="selectTagByTagName" resultType="Tags">
        match(n:Tags) where n.tagName=#{tagName} return n.tagName as tagName
    </select>

    <select id="selectTagsTagNumber" resultType="int">
        match(:DiscussPost)-[r:TAGS]-(:Tags{tagName:#{tagName}}) return count(r)
    </select>

    <select id="selectTagsByDiscussPostId" resultType="Tags">
        MATCH (:DiscussPost{PostId:#{postId}})-[:TAGS]->(n:Tags) return n.tagName as tagName
    </select>

    <select id="selectTags" resultType="Tags">
        MATCH (n:Tags) RETURN n.tagName as tagName order by tagName
    </select>

    <select id="selectAllTags" resultType="Tags">
        MATCH (:DiscussPost)-[r:TAGS]->(n:Tags) with n.tagName as tagName,count(r) as c
            return tagName order by c desc skip #{offset} limit #{limit}
    </select>

    <select id="selectVisitSecondByUserId" resultType="double">
        match(:User{UserId:#{userId}})-[r:VISIT]->(:DiscussPost{PostId:#{entityId}}) return r.second
    </select>



    <insert id="insertDiscussPost" parameterType="DiscussPost">
        MERGE(:DiscussPost{PostId:#{id},userId:#{userId},title:#{title},content:#{content},status:#{status},score:#{score},type:#{type},create_Time:'${createTime}',commentCount:#{commentCount}})
    </insert>

    <insert id="insertTags" parameterType="string">
        MERGE(:Tags{tagName:#{tagName}})
    </insert>

    <insert id="insertRelationDiscussPost">
        match(u:User{UserId:#{userId}})
        match(d:DiscussPost{PostId:#{postId}})
        MERGE(u)-[:POSTS]->(d)
        with u as u1,d as d1
        match(t:Tags) where t.tagName in #{tagName}
        MERGE(d1)-[:TAGS]->(t)
    </insert>

    <insert id="insertVisitSecond">
        match(u:User{UserId:#{userId}})
             match(d:DiscussPost{PostId:#{entityId}})
        MERGE(u)-[:VISIT{second:#{second}}]->(d)
    </insert>

    <update id="updateDiscussPostStatus">
        match(d:DiscussPost{PostId:#{postId}}) set d.status=#{status}
    </update>
    <update id="updateDiscussPostScore">
        match(d:DiscussPost{PostId:#{postId}}) set d.score=#{score}
    </update>

    <update id="updateVisitSecond">
        match(:User{UserId:#{userId}})-[r:VISIT]->(:DiscussPost{PostId:#{entityId}}) set r.second =#{second}
    </update>
</mapper>